
// ==========================================================================
// Functions
// ==========================================================================





/// Get a breakpoint's width
///
/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints
/// @param {Map}    $breakpoints - Map of breakpoints
///
/// @example scss
///      $tablet-width: mq-get-breakpoint-width(tablet);
///      @media (min-width: mq-get-breakpoint-width(desktop)) {}
///
/// @requires {Variable} $mq-breakpoints
///
/// @returns {Number} Value in pixels
@function bp( $name, $breakpoints: $mq-breakpoints ) {

    @if map-has-key( $breakpoints, $name ) {

        @return map-get( $breakpoints, $name );

    }

    @warn "Breakpoint #{$name} wasn't found in $breakpoints.";

    @return null;

}





/// Get Color Value
///
/// @param {String} $key - Name of color from value within $palette
///
/// @example scss
///     background-color: color( tundora );
///
/// @requires {Variable} $palette
///
/// @returns {String} hex color value
@function color( $key ) {

    @if map-has-key( $palette, $key ) {
        @return map-get( $palette, $key );
    }

    @warn "Unknown `#{$key}` in $palette.";

    @return null;

}





/// Determine Color Lightness
///
/// @param {String}  $color - single color value
/// @param {Integer} $threshold - point at which color becomes light (0-100)
///
/// @returns {Boolean} whether color is light or dark
@function color-lightness( $color, $threshold: 50 ) {

    @if ( lightness( $color ) > $threshold ) {
        @return true; // Lighter backgorund, return dark color
    }

  @return false;

}
